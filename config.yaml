apiVersion: k3d.io/v1alpha4
kind: Simple
metadata:
  name: ubk3s
servers: 1
#agents: 2
kubeAPI: 
  host: "ubk3s" #"myhost.my.domain"
  hostIP: "127.0.0.1"
  hostPort: "6445"
#image: rancher/k3s:v1.20.4-k3s1
#network: my-custom-net
#subnet: "172.28.0.0/16"
#token: superSecretToken
volumes: # repeatable flags are represented as YAML lists
  - volume: /data/k8s:/tmp/shared
    nodeFilters:
      - server:0
      - agent:*
ports:
  - port: 80:80
    nodeFilters:
      - loadbalancer
  - port: 443:443
    nodeFilters:
      - loadbalancer
  - port: 3333:3307
    nodeFilters:
      - loadbalancer
  - port: 3333:3307
    nodeFilters:
      - loadbalancer
  - port: 8222:8222
    nodeFilters:
      - loadbalancer
  - port: 6379:6379
    nodeFilters:
      - loadbalancer
#env:
#  - envVar: bar=baz # same as `--env 'bar=baz@server:0'`
#    nodeFilters:
#      - server:0
registries:
  create:
    name: registry.localhost
    host: "0.0.0.0"
    hostPort: "5000"
    volumes:
      - /data/k8s:/var/lib/registry # persist registry data locally
#  config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
#    mirrors:
#      "my.company.registry":
#        endpoint:
#          - http://my.company.registry:5000
#hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#  - ip: 1.2.3.4
#    hostnames: 
#      - my.host.local
#      - that.other.local
#  - ip: 1.1.1.1
#    hostnames:
#      - cloud.flare.dns
options:
  k3d:
    wait: true
    timeout: "60s"
    disableLoadbalancer: false
#    disableImageVolume: false
#    disableRollback: false
#    loadbalancer:
#      configOverrides:
#        - settings.workerConnections=2048
  k3s:
    extraArgs:
      - arg: --tls-san=192.168.1.0/24
#        nodeFilters:
#          - server:*
#    nodeLabels:
#      - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
#        nodeFilters:
#          - agent:1
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
#  runtime: # runtime (docker) specific options
#    gpuRequest: all # same as `--gpus all`
#    labels:
#      - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
#        nodeFilters:
#          - agent:1